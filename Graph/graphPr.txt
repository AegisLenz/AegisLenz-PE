제공된 로그를 구체적으로 분석하고 이를 기반으로 다음 정보를 추출하여 JavaScript 객체로 반환하세요.

1. `resources`: {{로그에 나타난 공격에 사용된 모든 리소스(예: EC2 instanceid, IAM UserName 등)의 목록}}
2. `Section`: {{리소스나 사용자를 그룹화할 수 있는 카테고리(예: User, Ec2, Role, S3 등) 반드시 모든 Section을 누락없이 반환하세요.}} 
3. `User` : {{`Section`에 해당하는 값 중 하나로 id는 로그에서 PrincipalId를 추출하여 각각 고유한 값을 가져야합니다. 또한, label은 로그에서 UserName을 추출하여 반환합니다.
            단, `nodes` 값이 비어 있거나 빈 배열(`[]`)인 항목은 반환 목록에서 반드시 제외되어야 합니다.  
            이 경우 `links` 값이나 `section`의 이름에 상관없이, `nodes`가 비어 있다면 해당 객체는 반환 대상에서 제외해야 합니다.  
            즉, `nodes`가 데이터를 포함하지 않는 객체는 반환 목록에 포함될 수 없습니다.}}
4. `Ec2` : {{`Section`에 해당하는 값 중 하나로 id는 임시로 고유한 값을 각각 생성합니다. 또한, label은 로그에서 instanceid를 추출하여 반환합니다.
            단, `nodes` 값이 비어 있거나 빈 배열(`[]`)인 항목은 반환 목록에서 반드시 제외되어야 합니다.  
            이 경우 `links` 값이나 `section`의 이름에 상관없이, `nodes`가 비어 있다면 해당 객체는 반환 대상에서 제외해야 합니다.  
            즉, `nodes`가 데이터를 포함하지 않는 객체는 반환 목록에 포함될 수 없습니다.}}
5. `Role` : {{`Section`에 해당하는 값 중 하나로 id는 임시로 고유한 값을 각각 생성합니다. 
            또한, label은 로그를 보며 roleName에 해당하는 role 이름을 반환해야합니다. 단, 해당 필드가 없을시 `Role` Section은 생략합니다.
            공격과 관련된 모든 `roleName`을 반환해야 하며, 누락이 발생하지 않도록 해야 합니다. 만약 누락된 항목이 발견될 경우, 로그를 재분석하여 누락된 `roleName`을 포함해 반환해야 합니다.
            해당 `Section`의 `links`는 로그를 분석하여 반드시 `UserName`과 `roleName` 간의 관계를 파악하고 연결해야 합니다. 로그에 `UserName` 또는 `roleName`이 없는 경우 해당 항목은 제외합니다.
            단, `nodes` 값이 비어 있거나 빈 배열(`[]`)인 항목은 반환 목록에서 반드시 제외되어야 합니다.  
            이 경우 `links` 값이나 `section`의 이름에 상관없이, `nodes`가 비어 있다면 해당 객체는 반환 대상에서 제외해야 합니다.  
            즉, `nodes`가 데이터를 포함하지 않는 객체는 반환 목록에 포함될 수 없습니다.}}
6. `links`: {{`section`의 값이 아니라 개별적인 Key입니다. 이 Key는 `source`, `target`, `value`와 같은 세부 정보를 포함하는 리스트를 가리킵니다.
            로그의 이벤트 이름과 흐름을 분석하여 공격의 전체적인 흐름을 파악하고, `resources`를 이용해 고유한 `source`와 `target` 쌍의 연결 관계를 생성합니다.  
            **중복 제거**: 동일한 `source`와 `target` 조합이 다른 로그나 이벤트에서 반복될 경우, 중복된 연결은 반환하지 않습니다. 
            **공격 흐름 기준**: 연결 관계의 순서는 공격 흐름을 기준으로 설정해야 합니다. 예를 들어, IAM 계정을 확인하는 시도부터 시작한 공격이라면, `source`는 IAM userName에서 시작하고, 이후 공격 단계에 사용된 리소스가 `target`이 되어야 합니다.
            **가중치 설정**: 모든 연결의 가중치(`value`)는 균등성을 유지하기 위해 항상 1로 고정합니다.}}

### 주의사항
1. 'Section'은 중복된 값은 생략합니다.
2. 모든 `links` 배열에서 각 `source`와 `target` 쌍은 고유해야 합니다. `value`는 중복 여부를 판단하는 데 사용하지 않으며, 동일한 `source-target` 조합이 있으면 추가하지 않습니다. 
3. 이미 생성된 `links`를 참조하여, 중복 여부를 판단하고 제거합니다. 더이상 연결지을 `links`가 없을 시 해당 `links`는 반환하지 않습니다.
4. 모든 links 내의 source와 target 쌍은 로그별 또는 eventName별로 반복되어 나타나지 않아야 합니다. 동일한 쌍은 절대 중복으로 반환되지 않아야 합니다.
5. `resources`에는 공격에 성공한 리소스만 포함해야 합니다. 예를 들어, 중지를 실패한 리소스 같이 공격에 실패한 리소스는 반환하지 않습니다. 
6. errorCode와 errorMessage를 잘 분석하여 실패한 공격은 `links`에 포함시키지 않습니다.
7. `section`의 `nodes` 값이 비어 있거나 빈 배열(`[]`)인 항목은 반환 목록에서 반드시 제외되어야 합니다. 이러한 항목은 `links` 값과 상관없이 제거해야 합니다.
8. `Role`은 모든 로그를 분석하여 반드시 모든 `roleName`을 포함하여 누락 없이 반환해야 합니다.

반드시 다음과 같은 형식으로 JavaScript 객체를 반환하세요:

"""javascript
    {{
        section: "Section",
        nodes: [
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
        ],
        links: []
    }},
    {{
        section: "Section",
        nodes: [
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
        ],
        links: [{{ source: "ID", target: "ID", value: 1 }}]
    }},
    {{
        section: "Section",
        nodes: [
            {{ id: "ID", label: "resources" }},
            {{ id: "ID", label: "resources" }},
        ],
        links: [
            {{ source: "ID", target: "ID", value: 1 }},
            {{ source: "ID", target: "ID", value: 1 }}
        ]
    }}

"""

제공된 로그:
{logs}

응답은 텍스트 형식으로 하며, 코드는 아래 형식을 따릅니다:
응답은 반드시 코드만 반환하며, 추가적인 텍스트나 ***```(Triple Backtick)은 포함하지 않아야*** 합니다.
